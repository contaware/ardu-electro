Files handling
--------------

1. All .ino files in the sketch root folder (shown in the Arduino IDE as 
   tabs with no extension) are concatenated together, starting with the 
   file that matches the folder name followed by the others in alphabetical 
   order. The resulting file is then named with a .cpp extension and if not 
   already present, #include <Arduino.h> is added. Other source files 
   directly under the sketch root folder are compiled together with this 
   synthesized file. 

2. Including with angle brackets searches the libraries folder for a library 
   with the same name (without .h).
   Including with double quotes first searches the sketch root folder and then
   behaves like the angle brackets inclusion.
   
3. Arduino IDE copies your sketch files to a different folder before 
   compiling them. Header files can be included with a relative path if 
   they are located at any depth under the sketch root folder or if you 
   provide an absolute path. To have also .cpp files regarded you must 
   create a src folder directly under the sketch root folder, this one is 
   then compiled recursively, that means you can have files at whatever 
   depth under src. Unlike the code files in the sketch root folder, these 
   files are not shown as tabs in the Arduino IDE. 

4. In order to use a function from a .c file in a .cpp file do include like:
   extern "C"
   {
     #include "foo.h"
   }

5. The sketch's data subfolder is used to add additional files to the sketch
   which will not be compiled. 


Libraries
---------

A library has .h file(s) and optionally .cpp file(s) in the src folder 
under its library root folder (for backwards compatibility they can be 
placed in library root folder). To avoid problem as bundled library a 
.cpp file should always use double quotes to include its .h file. 

Inside the library root folder there are a keywords.txt file and a 
library.properties file. It's also possible to add an examples folder. 
An extras folder can be used by the developer to put documentation 
or other items to be bundled with the library. 

A bundled library can be placed under the sketch's src folder (it must 
be accessed with a relative #include). A shared library is placed into 
the sketchbook/libraries folder. 

To edit the library files:
- Add an empty .development file to library root folder so that you are
  allowed to save from the IDE (in Windows Explorer add a new text file
  named .development.).
- Add an empty src.ino to src subfolder to be able to edit your .h and 
  .cpp files in the IDE.
Note: remove those two files when releasing the library!

To delete a library manually remove its folder from the 
sketchbook location\libraries directory.


Customizations of the IDE 
-------------------------

- Under File -> Preferences it's important to set the "Compiler 
  warnings" level to "More", otherwise we can make bad mistakes which 
  can cause strange crashes (like not returning an object in a function
  that defines to return one). Note that if you want to see all the 
  warnings again, you must close the IDE and re-open it so that the 
  cache gets cleared.

- Disable auto closing braces in preferences.txt:
  editor.auto_close_braces=false

- Unfortunately there is still no way to remove the auto-closing and 
  the auto-addition of asterisks for the multi-line comments, see:
  https://forum.arduino.cc/t/how-to-disable-the-ide-to-generate-asterisks-in-either-comment-line/582549
  https://github.com/bobbylight/RSyntaxTextArea/issues/151

Note: open preferences.txt from the IDE by clicking on its path found here:
      File -> Preferences -> More preferences can be edited directly in the file
      (before editing that file please close the IDE)
	  
	  
UTF-8
-----

The IDE editor defaults to UTF-8 files and supports UTF-8. The serial 
monitor correctly displays UTF-8 encoded byte-sequences.

For example the micro letter μ (U+03BC) in UTF-8 is 0xce 0xbc. It's 
possible to print UTF-8 like:
Serial.write(0xce); Serial.write(0xbc);
or:
Serial.print(u8"\xce\xbc");
or:
Serial.print(u8"μ");

Attention:
Serial.print('μ') is not working, it prints the integer corresponding
to '\xffffcebc'

Print with \u and \U:
Serial.print(u8"\u03bc\U0001f60e");
or:
const char usmile[] = u8"\u03bc\U0001f60e"; Serial.print(usmile);

Notes:
the u8 prefix is not needed for gcc because that compiler assumes UTF-8
by default. There is a new char8_t type for UTF-8, but it is not yet
supported in the gcc version bundled with the Arduino IDE. In C++20
char8_t has an underlying representation that matches unsigned char but
it is a distinct type.


Serial Monitor and Upload 
-------------------------

In serial monitor use arrow up/down to recall previously sent values.

Boards with non-native USB support get a reset and do restart the sketch
execution each time the Serial Monitor is opened. 
The 32u4 and SAMD21 based boards implement their connection to the PC 
via the native USB peripheral like:

1. PC sends a "I want to upload a new sketch" message to the Arduino 
   over the existing USB connection.
   
2. The Arduino resets, causing the USB connection to go down.

3. The Arduino runs the bootloader code, which brings the USB connection
   back up as another USB peripheral with another COM port number.
   
4. The sketch is uploaded to the Arduino over the bootloader USB 
   connection.

5. The bootloader resets, which causes the USB connection to go down
   again.
   
6. Normal boot starts and the USB connection comes back, in your sketch
   you can wait to it with:
   
   while (!Serial);
   
   When using that while loop you will always need a connection to the
   PC and an application that opens the serial port for your sketch to 
   get past that point!

Hints:

- If you get "SAM-BA operation failed" but "Verify successful" then you 
can safely ignore the error as it correctly uploaded. If you mind, just
use a slow USB HUB then it will go away, see also:
https://github.com/arduino/ArduinoCore-samd/issues/198
https://forums.adafruit.com/viewtopic.php?f=57&t=167008

- A double-tap reset directly enters in bootloader mode, that can help.

- In Device Manager you can remove/change COM ports, run cmd as admin:
>set devmgr_show_nonpresent_devices=1
>start devmgmt.msc
Device Manager select View - Show hidden devices


Serial Plotter
--------------

The vertical Y axis auto adjusts as the value of your output increases 
or decreases, and the X axis is a fixed 500 point axis with each tick 
of the axis equal to an executed serial println command (there is no 
time scale possibility). When data point 501 shows up, data point 1 
is lost, there's no way to stop the plot from scrolling out to the left.
You can't open the serial monitor simultaneously with the serial plotter.

To plot multiple values do separate them by a space, comma or \t. 

To print labels, in setup() do a println with each label ending with a 
colon and separate them by a space, comma or \t. Because the space is a 
separator you cannot use it in labels!


References
----------

https://arduino.github.io/arduino-cli/sketch-specification/
https://arduino.github.io/arduino-cli/sketch-build-process/
https://www.arduino.cc/reference/en/language/structure/further-syntax/include/
https://arduino.github.io/arduino-cli/library-specification/
https://github.com/arduino/Arduino/blob/master/build/shared/ArduinoSerialPlotterProtocol.md